# Tratteria Example Configuration
#
# This file includes detailed configuration options with comments explaining each setting.
# Customize this configuration according to your environment needs.



# The issuer URL indicates the txn-token server that issues the token.
issuer: https://example.org/tts

# The audience URL defines the intended recipient of the token.
audience: https://example.org/

# Token settings.
token:
  lifeTime: "15s"  # The lifetime of the token.

# Keys for token signing (optional). Automatically generated if not provided. JWKS is available at ./well-known/jwks.json.
# If decided to generated and distribute keys manually, see: https://github.com/SGNL-ai/Tratteria/blob/main/example-application/deployments/kubernetes/tratteria/deploy.sh as reference.
keys:
  privateKey: ${PRIVATE_KEY}
  jwks: ${JWKS}
  keyID: ${KEY_ID}

# SPIFFE settings (optional). If omitted, ensure an alternative method is used to securely authenticate requesting workloads.
spiffe:
  endpoint_socket: unix:///run/spire/sockets/agent.sock  # SPIFFE endpoint socket.
  serviceID: spiffe://example.org/tts                     # Tratteria SPIFFE ID.
  authorizedServiceIDs:                                   # List of SPIFFE IDs that are authorized to request txn-tokens.
    - spiffe://example.org/gateway

# Configuration for subject tokens (at least one type must be provided).
subjectTokens:
  OIDC:  # OpenID Connect Token (optional).
    clientId: example-client                     # Client ID for OIDC.
    providerURL: http://example.org/oidcprovider  # OIDC provider URL.
    subjectField: email                          # Claim in ID token used as the subject identifier.
  selfSigned:  # Self-signed token (optional).
    validation: true                             # Toggle for self-signed tokens signature validation. Ensure this is enabled in production settings.
    jwksEndpoint: http://example.org/oidcprovider/.well-known/jwks.json  # JWKS endpoint for self-signed token keys.

# Toggle to enable access evaluation.
enableAccessEvaluation: true

# Access evaluation API configuration (optional).
accessEvaluationAPI:
  endpoint: https://example.authzen.com/access/v1/evaluation  # Endpoint for access evaluation.
  authentication: 
    method: Bearer  # Authentication method.
    token:
      value: ${AUTHORIZATION_API_BEARER_TOKEN}  # Token value for Bearer authentication.

#requestMapping: Define how to construct the request body for the Authorization API using JSON path expressions. This mapping pulls specific values from
#the transaction-token request (subject_token, purpose, request_details, and request_context) using JSON path expression and assigns them to respective
#fields below to construct the JSON request body for the Authorization API.
  requestMapping:
    subject:
      id: "$.subject_token.email"
    action:
      name: "$.purpose"
    resource:
      stockID: "$.request_details.stockID"
      transactionID: "$.request_details.transactionID"
    context: "$.request_context"